stages:
  - build
  - test
  - docker
  - deploy

services:
   - postgres:latest

variables:
  POSTGRES_DB: fitness_tracker
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: root
  #SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/fitness_tracker
  #SPRING_DATASOURCE_USERNAME: postgres
  #SPRING_DATASOURCE_PASSWORD: root
  CLOUD_SQL_CONNECTION_NAME: fitnesstracker-427616:us-central1:fitness-tracker-instance
  SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/fitness_tracker?socketFactory=com.google.cloud.sql.postgres.SocketFactory&cloudSqlInstance=${CLOUD_SQL_CONNECTION_NAME}
  GCLOUD_PROJECT_ID: fitnesstracker-427616
  GCLOUD_ZONE: us-central1
  GCLOUD_CLUSTER: autopilot-cluster-1

# Build the Spring Boot backend
build-backend:
  stage: build
  image: maven:3.8.4-openjdk-17
  script:
    - mvn clean package -DskipTests
  artifacts:
    paths:
      - target/*.jar
  only:
    - main

## Test the Spring Boot backend
#test-backend:
# stage: test
# image: maven:3.8.4-openjdk-17
# script:
#   - mvn test -Dspring.profiles.active=test
# artifacts:
#   when: always
#   paths:
#     - target/surefire-reports/
# only:
#   - main


# Test the Spring Boot backend
test-backend:
  stage: test
  image: maven:3.8.4-openjdk-17
  services:
    - name: google/cloud-sdk:latest
      entrypoint: ["/bin/bash", "-c", "while true; do sleep 30; done;"]
  script:
    - apt-get update && apt-get install wget -y
    - wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
    - chmod +x cloud_sql_proxy
    - ./cloud_sql_proxy -instances=${CLOUD_SQL_CONNECTION_NAME}=tcp:5432 &
    - mvn test -Dspring.profiles.active=test
  artifacts:
    when: always
    paths:
      - target/surefire-reports/
  only:
    - main


# Build the React frontend
docker-build-frontend:
  stage: build
  image: node:14
  script:
    - cd fitness-tracker
    - npm install
    - npm run build
  artifacts:
    paths:
      - fitness-tracker/build
  only:
    - main

# Build Docker images for backend and frontend
docker-build-backend:
  stage: docker
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA -f Dockerfile.backend .
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA -f fitness-tracker/Dockerfile.frontend ./fitness-tracker
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA
  only:
    - main

# Deploy to Google Kubernetes Engine
deploy:
  stage: deploy
  image: google/cloud-sdk:latest
  script:
    - echo $GCLOUD_SERVICE_KEY | base64 --decode -i > ${HOME}/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
    - gcloud config set project $GCLOUD_PROJECT_ID
    - gcloud config set compute/zone $GCLOUD_ZONE
    - gcloud container clusters get-credentials $GCLOUD_CLUSTER
    - kubectl apply -f k8s/backend-deployment.yaml
    - kubectl apply -f k8s/frontend-deployment.yaml
  only:
    - main