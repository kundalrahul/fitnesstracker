stages:
  - build
  - test
  - docker
  - deploy

services:
   - postgres:latest

variables:
  POSTGRES_DB: fitness_tracker
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: root
  SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/fitness_tracker
  SPRING_DATASOURCE_USERNAME: postgres
  SPRING_DATASOURCE_PASSWORD: root

# Build the Spring Boot backend
build-backend:
  stage: build
  image: maven:3.8.4-openjdk-17
  script:
    - mvn clean package -DskipTests
  artifacts:
    paths:
      - target/*.jar
  only:
    - main

# Test the Spring Boot backend
test-backend:
 stage: test
 image: maven:3.8.4-openjdk-17
 script:
   - mvn test -Dspring.profiles.active=test
 artifacts:
   when: always
   paths:
     - target/surefire-reports/
 only:
   - main

docker-build:
  stage: docker
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA -f Dockerfile.backend .
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA
  only:
    - main

deploy:
  stage: deploy
  image: google/cloud-sdk:latest
  script:
    - echo $GCLOUD_SERVICE_KEY | base64 --decode -i > ${HOME}/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
    - gcloud config set project $GCLOUD_PROJECT_ID
    - gcloud config set compute/zone $GCLOUD_ZONE
    - gcloud container clusters get-credentials $GCLOUD_CLUSTER
    - kubectl apply -f backend-deployment.yaml
    - kubectl apply -f backend-service.yaml
  only:
    - main